# handlers/common_handlers.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from keyboards.inline import get_main_settings_keyboard
from states.user_states import SettingsStates
from config import DEFAULT_LANGUAGE, DEFAULT_SUMMARY_STYLE, SUPPORTED_LANGUAGES, \
    SUMMARY_STYLES

router = Router()


def get_user_settings(user_id: int, dp_user_settings: dict):
    if user_id not in dp_user_settings:
        dp_user_settings[user_id] = {
            "language": DEFAULT_LANGUAGE,
            "summary_style": DEFAULT_SUMMARY_STYLE,
            "summary_style_name": SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"]
        }
    elif 'summary_style_name' not in dp_user_settings[user_id]:
        current_style_key = dp_user_settings[user_id].get('summary_style', DEFAULT_SUMMARY_STYLE)
        dp_user_settings[user_id]['summary_style_name'] = \
        SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]
    return dp_user_settings[user_id]


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, user_settings: dict, whisper_model: tuple):
    await state.clear()
    current_user_settings = get_user_settings(message.from_user.id, user_settings)

    user_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    _, device = whisper_model

    current_summary_style_name = current_user_settings.get('summary_style_name', SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"])

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(user_name)}!\n\n"
        "–Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ó–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n"
        "1Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ (.ogg) –∏ –∞—É–¥–∏–æ (.mp3, .wav, etc.) —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "2Ô∏è‚É£ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é Whisper.\n"
        "3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM.\n\n"
        f"üîπ –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {hbold(SUPPORTED_LANGUAGES.get(current_user_settings['language'], '–ê–≤—Ç–æ'))}\n"
        f"üîπ –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å —Ä–µ–∑—é–º–µ: {hbold(current_summary_style_name)}\n"
        f"üî¨ Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: {hbold(device.upper())}\n\n"
        "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞—É–¥–∏–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    await message.answer(text)


@router.message(Command("help"))
async def cmd_help(message: types.Message, user_settings: dict):
    current_user_settings = get_user_settings(message.from_user.id, user_settings)
    current_lang_name = SUPPORTED_LANGUAGES.get(current_user_settings['language'], "–ê–≤—Ç–æ")

    current_style_key = current_user_settings.get('summary_style', DEFAULT_SUMMARY_STYLE)
    current_style_name = SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]

    text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n"
        "üé§ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1.  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–ø–∏—Å—å –∏–∑ Telegram) –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n"
        "2.  –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å.\n"
        "3.  –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—à–ª–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (/settings):</b>\n"
        f"- <b>–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:</b> –°–µ–π—á–∞—Å \"{current_lang_name}\". –í–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. '–ê–≤—Ç–æ' –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.\n"
        f"- <b>–°—Ç–∏–ª—å —Ä–µ–∑—é–º–µ:</b> –°–µ–π—á–∞—Å \"{current_style_name}\". –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "‚ùå <b>–û—Ç–º–µ–Ω–∞:</b> –ö–æ–º–∞–Ω–¥–∞ /cancel –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫)."
    )
    await message.answer(text)


@router.message(Command("settings"))
async def cmd_settings(message: types.Message, state: FSMContext):
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                         reply_markup=get_main_settings_keyboard())


@router.callback_query(F.data == "settings:close", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_settings_close(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    await callback.answer()


@router.message(Command("cancel"))
@router.callback_query(F.data == "cancel_state")
async def cmd_cancel(event: types.Message | types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    await state.clear()
    text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if isinstance(event, types.Message):
        await event.answer(text)
    elif isinstance(event, types.CallbackQuery) and event.message:
        try:
            await event.message.edit_text(text)
        except Exception:
            await event.message.answer(text)
        await event.answer()


@router.message(F.text.startswith('/'))
async def unhandled_command_fallback(message: types.Message):
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /help.")